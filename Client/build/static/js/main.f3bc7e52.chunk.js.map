{"version":3,"sources":["hooks/useInput.js","views/LoginPage.js","views/CreateAccountPage.js","components/Message.js","components/ChatWindow.js","components/ChatInput.js","views/ChatRoom.js","App.js","serviceWorker.js","index.js"],"names":["useInput","initial","useState","input","setInput","e","target","value","LoginPage","history","loggedIn","username","setUsername","password","setPassword","to","className","onSubmit","preventDefault","axios","post","withCredentials","then","response","data","push","catch","error","console","log","htmlFor","type","name","id","onChange","CreateAccountPage","action","method","Message","text","ChatWindow","props","messages","map","message","key","uuid","ChatInput","socket","setMessage","clearMessage","handleClick","newMessage","onKeyPress","onClick","ChatRoom","setMessages","useEffect","io","on","prevMsg","emit","App","userData","setUserData","get","res","err","exact","path","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3bc7e52.chunk.js","sourcesContent":["import {useState} from 'react';\n\nfunction useInput(initial = ''){\n    const [input, setInput] = useState(initial);\n    const onChange = e =>{\n        setInput(e.target.value);\n    }\n    const reset = () =>{\n        setInput('');\n    }\n    return [input, onChange, reset];\n}\n\nexport default useInput;","import React from 'react';\nimport useInput from '../hooks/useInput';\nimport {Link, Redirect} from 'react-router-dom';\nimport axios from 'axios';\nimport './LoginPage.css'\n\nfunction LoginPage({history, loggedIn}){\n    const [username, setUsername] = useInput();\n    const [password, setPassword] = useInput();\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        axios.post('/api/users/login', {\n            username:username,\n            password:password,\n            withCredentials:true\n        })\n        .then( response => {\n            if(response.data.loggedIn){\n                history.push('/chat');\n            }\n        }) \n        .catch( error => console.log(error));\n    }\n\n    if(loggedIn){\n        return <Redirect to='/chat' />\n    } else {\n        return(\n            <div className='LoginPage' >\n                <form onSubmit={handleSubmit}>\n                    <h1>Sign In</h1>\n                    <label htmlFor=\"username\">Username</label>\n                    <input type=\"text\" name='username' id='username' value={username} onChange={setUsername} />\n                    <label htmlFor=\"password\">Password</label>\n                    <input type=\"password\" name='password' id='password' value={password} onChange={setPassword} />\n                    <button>Login</button>\n                    <Link to='/users/new'>Create User</Link>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default LoginPage; ","import React from 'react';\nimport useInput from '../hooks/useInput';\nimport './CreateAccountPage.css'\n\nfunction CreateAccountPage(){\n    const [username, setUsername] = useInput();\n    const [password, setPassword] = useInput();\n    \n    return(\n        <div className='CreateAccountPage' >\n            <form action='api/users/new' method='POST'>\n                <h1>Create an Account</h1>\n                <label htmlFor=\"username\">Username</label>\n                <input type=\"text\" name='username' id='username' value={username} onChange={setUsername} />\n                <label htmlFor=\"password\">Password</label>\n                <input type=\"password\" name='password' id='password' value={password} onChange={setPassword} />\n                <button>Sign Up</button>\n            </form>\n        </div>\n    );\n}\n\nexport default CreateAccountPage; ","import React from 'react';\n\nfunction Message({text}){\n    return(\n        <li>{text}</li>\n    );\n}\n\n\nexport default Message;","import React from 'react';\nimport uuid from 'uuid/v4';\nimport Message from './Message';\nimport './ChatWindow.css';\n\n\n\nfunction ChatWindow(props){\n    return(\n        <div className='ChatWindow'>\n            <ul>\n                {props.messages.map( message => <Message key={uuid()} text={message}/> )}\n            </ul>\n        </div>\n    );\n}\n\nexport default ChatWindow;","import React from 'react';\nimport useInput from '../hooks/useInput';\nimport './ChatInput.css'\n\nfunction ChatInput(props){\n    const [message, setMessage, clearMessage] = useInput();\n\n    function handleClick(){\n        props.newMessage(message);\n        clearMessage();\n    }\n    \n    function handleEnter(e){\n        if(e.key === 'Enter'){\n            e.preventDefault();\n            handleClick();\n        }\n    }\n\n    return(\n        <div className='ChatInput'>\n            <textarea type=\"text\" value={message} onChange={setMessage} onKeyPress={handleEnter} />\n            <button onClick={handleClick}>Send</button>\n        </div>\n    );\n}\n\nexport default ChatInput;","import React, {useState, useEffect} from 'react';\nimport io from 'socket.io-client';\nimport ChatWindow from '../components/ChatWindow';\nimport ChatInput from '../components/ChatInput';\nimport './ChatRoom.css';\nimport axios from 'axios';\n\nlet socket;\nfunction ChatRoom(){\n    const [messages, setMessages] = useState([]);\n\n    useEffect(() => {\n        socket = io();\n        //listens for new messages from the backend and updates state\n        socket.on('chat message', (message) => {\n            setMessages(prevMsg => [...prevMsg, message]);\n        });\n    }, []);\n\n    //Sends message to backend\n    function newMessage(message){\n        socket.emit('chat message', message);\n        setMessages(prevMsg => [...prevMsg, message]);\n    }\n\n    return(\n        <div>\n            <ChatWindow messages={messages} />\n            <ChatInput newMessage={newMessage} />\n        </div>\n    );\n}\n\nexport default ChatRoom;","import React, {useEffect, useState} from 'react';\nimport {Switch, Route} from 'react-router-dom';\nimport LoginPage from './views/LoginPage';\nimport CreateAccountPage from './views/CreateAccountPage';\nimport ChatRoom from './views/ChatRoom';\nimport axios from 'axios';\nimport './App.css';\n\nfunction App() {\n  const [userData, setUserData] = useState({loggedIn:false});\n\n  useEffect(() =>{\n    axios.get('/api/users/loggedon', {withCredentials:true})\n      .then( res => setUserData(res.data) )\n      .catch( err => console.log(err) );\n  }, [])\n\n  return (\n    <Switch>\n      <Route exact path = '/' render={(props) => <LoginPage {...props} {...userData} /> } />\n      <Route exact path = '/chat'><ChatRoom /></Route>\n      <Route exact path = '/users/new'><CreateAccountPage /></Route>\n    </Switch>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter><App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}